# Common configuration for all services
spring:
  application:
    name: multi-tenant-app
  
  # Database configuration
  datasource:
    master:
      url: jdbc:postgresql://localhost:5432/master_db
      username: postgres
      password: postgres
      driver-class-name: org.postgresql.Driver
      hikari:
        minimum-idle: 2
        maximum-pool-size: 10
        idle-timeout: 30000
        pool-name: MasterHikariPool
        max-lifetime: 2000000
        connection-timeout: 30000
  
  # JPA configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        show_sql: false
        use_sql_comments: false
        jdbc:
          lob:
            non_contextual_creation: true
  
  # Redis configuration
  redis:
    enabled: true
    host: localhost
    port: 6379
    password:
    timeout: 10000
    database: 0
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
  
  # Kafka configuration
  kafka:
    enabled: true
    bootstrap-servers: localhost:9092
    consumer:
      group-id: multi-tenant-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

# AWS configuration
aws:
  region: us-east-1
  s3:
    enabled: true
    endpoint: http://localhost:4566
    bucket-name: multi-tenant-bucket
  sqs:
    enabled: true
    endpoint: http://localhost:4566
    queue-name: multi-tenant-queue
  secretsmanager:
    enabled: true
    endpoint: http://localhost:4566

# Minio configuration
minio:
  enabled: true
  endpoint: http://localhost:9000
  access-key: minioadmin
  secret-key: minioadmin
  bucket-name: multi-tenant-bucket

# Server configuration
server:
  port: 8080
  servlet:
    context-path: /api

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  health:
    redis:
      enabled: ${spring.redis.enabled}

# Logging configuration
logging:
  level:
    root: INFO
    com.example: DEBUG
    org.springframework: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# Tenant configuration
tenant:
  default-tenant: default
  header-name: X-TenantID

